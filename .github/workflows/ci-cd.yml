name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: üèóÔ∏è Build & Push Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Auth Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/auth-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

      - name: Build & Push Product Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/product-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/product-service:latest

      - name: Build & Push Order Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/order-service
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/order-service:latest

      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

  test:
    name: üõ†Ô∏è Run Backend & Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Backend Dependencies
        run: |
          cd services/auth-service && npm install
          cd ../product-service && npm install
          cd ../order-service && npm install

      - name: Run Backend Tests
        run: |
          cd services/auth-service && npm test
          cd ../product-service && npm test
          cd ../order-service && npm test

      - name: Install Frontend Dependencies
        run: cd frontend && npm install

      - name: Run Frontend Tests
        run: cd frontend && npm run test

  security:
    name: üîí Security Scan with Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.35.0_Linux-64bit.tar.gz
          tar zxvf trivy_0.35.0_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Scan Docker Images for Vulnerabilities
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/product-service:latest
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ secrets.DOCKER_USERNAME }}/order-service:latest

  deploy:
    name: üöÄ Deploy to Docker Swarm
    runs-on: ubuntu-latest
    needs: [build, test, security]
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/product-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/order-service:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker stack deploy -c /path/to/docker-compose.prod.yml ecommerce
